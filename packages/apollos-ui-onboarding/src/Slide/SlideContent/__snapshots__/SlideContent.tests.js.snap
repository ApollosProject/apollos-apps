// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`The Onboarding Slide component should render a custom icon 1`] = `
<View
  style={
    Object {
      "flex": 1,
    }
  }
>
  <View
    onLayout={[Function]}
    pointerEvents="box-none"
    style={
      Array [
        Object {
          "bottom": 0,
          "left": 0,
          "overflow": "hidden",
          "position": "absolute",
          "right": 0,
          "top": 0,
        },
        Object {},
      ]
    }
  />
  <View
    style={
      Object {
        "marginBottom": 48,
        "paddingHorizontal": 16,
        "paddingTop": 16,
      }
    }
  >
    <View>
      <View
        style={
          Object {
            "paddingBottom": 16,
          }
        }
      >
        <RNSVGSvgView
          align="xMidYMid"
          bbHeight={48}
          bbWidth={48}
          color="#00676D"
          height={48}
          id="Raw"
          meetOrSlice={0}
          minX={0}
          minY={0}
          size={48}
          style={
            Array [
              Object {
                "backgroundColor": "transparent",
                "borderWidth": 0,
              },
              Object {},
              null,
              Object {
                "flex": 0,
                "height": 48,
                "width": 48,
              },
            ]
          }
          tintColor="#00676D"
          vbHeight={256}
          vbWidth={256}
          width={48}
        >
          <RNSVGGroup
            fill={
              Array [
                0,
                4278190080,
              ]
            }
            fillOpacity={1}
            fillRule={1}
            font={Object {}}
            matrix={
              Array [
                1,
                0,
                0,
                1,
                0,
                0,
              ]
            }
            opacity={1}
            originX={0}
            originY={0}
            propList={Array []}
            rotation={0}
            scaleX={1}
            scaleY={1}
            skewX={0}
            skewY={0}
            stroke={null}
            strokeDasharray={null}
            strokeDashoffset={null}
            strokeLinecap={0}
            strokeLinejoin={0}
            strokeMiterlimit={4}
            strokeOpacity={1}
            strokeWidth={1}
            vectorEffect={0}
            x={0}
            y={0}
          >
            <RNSVGRect
              fill={null}
              fillOpacity={1}
              fillRule={1}
              height={256}
              matrix={
                Array [
                  1,
                  0,
                  0,
                  1,
                  0,
                  0,
                ]
              }
              opacity={1}
              originX={0}
              originY={0}
              propList={
                Array [
                  "fill",
                ]
              }
              rotation={0}
              rx={0}
              ry={0}
              scaleX={1}
              scaleY={1}
              skewX={0}
              skewY={0}
              stroke={null}
              strokeDasharray={null}
              strokeDashoffset={null}
              strokeLinecap={0}
              strokeLinejoin={0}
              strokeMiterlimit={4}
              strokeOpacity={1}
              strokeWidth={1}
              vectorEffect={0}
              width={256}
              x={0}
              y={0}
            />
            <RNSVGPath
              d="M176,200a24,24,0,0,1-48,0V136"
              fill={null}
              fillOpacity={1}
              fillRule={1}
              matrix={
                Array [
                  1,
                  0,
                  0,
                  1,
                  0,
                  0,
                ]
              }
              opacity={1}
              originX={0}
              originY={0}
              propList={
                Array [
                  "fill",
                  "stroke",
                  "strokeWidth",
                  "strokeLinecap",
                  "strokeLinejoin",
                ]
              }
              rotation={0}
              scaleX={1}
              scaleY={1}
              skewX={0}
              skewY={0}
              stroke={
                Array [
                  0,
                  4278216557,
                ]
              }
              strokeDasharray={null}
              strokeDashoffset={null}
              strokeLinecap={1}
              strokeLinejoin={1}
              strokeMiterlimit={4}
              strokeOpacity={1}
              strokeWidth={16}
              vectorEffect={0}
              x={0}
              y={0}
            />
            <RNSVGPath
              d="M32.33457,136a8.021,8.021,0,0,1-7.97506-8.70945,104.00633,104.00633,0,0,1,207.281,0A8.021,8.021,0,0,1,223.66543,136Z"
              fill={null}
              fillOpacity={1}
              fillRule={1}
              matrix={
                Array [
                  1,
                  0,
                  0,
                  1,
                  0,
                  0,
                ]
              }
              opacity={1}
              originX={0}
              originY={0}
              propList={
                Array [
                  "fill",
                  "stroke",
                  "strokeWidth",
                  "strokeLinecap",
                  "strokeLinejoin",
                ]
              }
              rotation={0}
              scaleX={1}
              scaleY={1}
              skewX={0}
              skewY={0}
              stroke={
                Array [
                  0,
                  4278216557,
                ]
              }
              strokeDasharray={null}
              strokeDashoffset={null}
              strokeLinecap={1}
              strokeLinejoin={1}
              strokeMiterlimit={4}
              strokeOpacity={1}
              strokeWidth={16}
              vectorEffect={0}
              x={0}
              y={0}
            />
            <RNSVGPath
              d="M88,136c0-72,40-104,40-104s40,32,40,104"
              fill={null}
              fillOpacity={1}
              fillRule={1}
              matrix={
                Array [
                  1,
                  0,
                  0,
                  1,
                  0,
                  0,
                ]
              }
              opacity={1}
              originX={0}
              originY={0}
              propList={
                Array [
                  "fill",
                  "stroke",
                  "strokeWidth",
                  "strokeLinecap",
                  "strokeLinejoin",
                ]
              }
              rotation={0}
              scaleX={1}
              scaleY={1}
              skewX={0}
              skewY={0}
              stroke={
                Array [
                  0,
                  4278216557,
                ]
              }
              strokeDasharray={null}
              strokeDashoffset={null}
              strokeLinecap={1}
              strokeLinejoin={1}
              strokeMiterlimit={4}
              strokeOpacity={1}
              strokeWidth={16}
              vectorEffect={0}
              x={0}
              y={0}
            />
          </RNSVGGroup>
        </RNSVGSvgView>
      </View>
      <View
        style={
          Object {
            "paddingBottom": 8,
          }
        }
      >
        <Text
          style={
            Object {
              "color": "#00676D",
              "fontFamily": "InterUI-Black",
              "fontSize": 36,
              "lineHeight": 41.4,
            }
          }
        />
      </View>
      <Text
        style={
          Object {
            "color": "rgba(39, 39, 46, 0.6)",
            "fontFamily": "InterUI-Medium",
            "fontSize": 14,
            "lineHeight": 21,
          }
        }
      />
    </View>
  </View>
</View>
`;

exports[`The Onboarding Slide component should render a description 1`] = `
<View
  style={
    Object {
      "flex": 1,
    }
  }
>
  <View
    onLayout={[Function]}
    pointerEvents="box-none"
    style={
      Array [
        Object {
          "bottom": 0,
          "left": 0,
          "overflow": "hidden",
          "position": "absolute",
          "right": 0,
          "top": 0,
        },
        Object {},
      ]
    }
  />
  <View
    style={
      Object {
        "marginBottom": 48,
        "paddingHorizontal": 16,
        "paddingTop": 16,
      }
    }
  >
    <View>
      <View
        style={
          Object {
            "paddingBottom": 8,
          }
        }
      >
        <Text
          style={
            Object {
              "color": "#00676D",
              "fontFamily": "InterUI-Black",
              "fontSize": 36,
              "lineHeight": 41.4,
            }
          }
        />
      </View>
      <Text
        style={
          Object {
            "color": "rgba(39, 39, 46, 0.6)",
            "fontFamily": "InterUI-Medium",
            "fontSize": 14,
            "lineHeight": 21,
          }
        }
      >
        There's that word again: "heavy." Why are things so heavy in the future? Is there a problem with the Earth's gravitational pull?
      </Text>
    </View>
  </View>
</View>
`;

exports[`The Onboarding Slide component should render a loading state 1`] = `
<View
  style={
    Object {
      "flex": 1,
    }
  }
>
  <View
    onLayout={[Function]}
    pointerEvents="box-none"
    style={
      Array [
        Object {
          "bottom": 0,
          "left": 0,
          "overflow": "hidden",
          "position": "absolute",
          "right": 0,
          "top": 0,
        },
        Object {},
      ]
    }
  />
  <View
    style={
      Object {
        "marginBottom": 48,
        "paddingHorizontal": 16,
        "paddingTop": 16,
      }
    }
  >
    <View>
      <View
        style={
          Object {
            "paddingBottom": 16,
          }
        }
      >
        <View
          style={
            Object {
              "backgroundColor": "#A5A5A5",
              "borderRadius": 16,
              "height": 48,
              "width": 48,
            }
          }
        />
      </View>
      <View
        style={
          Object {
            "paddingBottom": 8,
          }
        }
      >
        <View
          style={
            Object {
              "alignSelf": "stretch",
              "backgroundColor": "#A5A5A5",
              "borderRadius": 16,
              "height": 36,
              "marginVertical": 2.6999999999999993,
              "width": "100%",
            }
          }
        />
      </View>
      <View
        style={
          Object {
            "alignSelf": "stretch",
            "backgroundColor": "#A5A5A5",
            "borderRadius": 16,
            "height": 14,
            "marginVertical": 3.5,
            "width": "60%",
          }
        }
      />
    </View>
  </View>
</View>
`;

exports[`The Onboarding Slide component should render a title 1`] = `
<View
  style={
    Object {
      "flex": 1,
    }
  }
>
  <View
    onLayout={[Function]}
    pointerEvents="box-none"
    style={
      Array [
        Object {
          "bottom": 0,
          "left": 0,
          "overflow": "hidden",
          "position": "absolute",
          "right": 0,
          "top": 0,
        },
        Object {},
      ]
    }
  />
  <View
    style={
      Object {
        "marginBottom": 48,
        "paddingHorizontal": 16,
        "paddingTop": 16,
      }
    }
  >
    <View>
      <View
        style={
          Object {
            "paddingBottom": 8,
          }
        }
      >
        <Text
          style={
            Object {
              "color": "#00676D",
              "fontFamily": "InterUI-Black",
              "fontSize": 36,
              "lineHeight": 41.4,
            }
          }
        >
          Whoa, this is heavy
        </Text>
      </View>
      <Text
        style={
          Object {
            "color": "rgba(39, 39, 46, 0.6)",
            "fontFamily": "InterUI-Medium",
            "fontSize": 14,
            "lineHeight": 21,
          }
        }
      />
    </View>
  </View>
</View>
`;

exports[`The Onboarding Slide component should render accept additionall props 1`] = `
<View
  style={
    Object {
      "flex": 1,
    }
  }
>
  <View
    onLayout={[Function]}
    pointerEvents="box-none"
    style={
      Array [
        Object {
          "bottom": 0,
          "left": 0,
          "overflow": "hidden",
          "position": "absolute",
          "right": 0,
          "top": 0,
        },
        Object {},
      ]
    }
  />
  <View
    style={
      Object {
        "flex": 1,
        "justifyContent": "center",
        "marginBottom": 48,
        "paddingHorizontal": 16,
        "paddingTop": 16,
      }
    }
  >
    <View>
      <View
        style={
          Object {
            "paddingBottom": 8,
          }
        }
      >
        <Text
          style={
            Object {
              "color": "#00676D",
              "fontFamily": "InterUI-Black",
              "fontSize": 36,
              "lineHeight": 41.4,
            }
          }
        />
      </View>
      <Text
        style={
          Object {
            "color": "rgba(39, 39, 46, 0.6)",
            "fontFamily": "InterUI-Medium",
            "fontSize": 14,
            "lineHeight": 21,
          }
        }
      />
    </View>
    <Text>
      Great Scott!
    </Text>
  </View>
</View>
`;

exports[`The Onboarding Slide component should render an icon 1`] = `
<View
  style={
    Object {
      "flex": 1,
    }
  }
>
  <View
    onLayout={[Function]}
    pointerEvents="box-none"
    style={
      Array [
        Object {
          "bottom": 0,
          "left": 0,
          "overflow": "hidden",
          "position": "absolute",
          "right": 0,
          "top": 0,
        },
        Object {},
      ]
    }
  />
  <View
    style={
      Object {
        "marginBottom": 48,
        "paddingHorizontal": 16,
        "paddingTop": 16,
      }
    }
  >
    <View>
      <View
        style={
          Object {
            "paddingBottom": 16,
          }
        }
      >
        <RNSVGSvgView
          align="xMidYMid"
          bbHeight={48}
          bbWidth={48}
          height={48}
          icon={true}
          meetOrSlice={0}
          minX={0}
          minY={0}
          style={
            Array [
              Object {
                "backgroundColor": "transparent",
                "borderWidth": 0,
              },
              undefined,
              null,
              Object {
                "flex": 0,
                "height": 48,
                "width": 48,
              },
            ]
          }
          vbHeight={24}
          vbWidth={24}
          width={48}
        >
          <RNSVGGroup
            fill={
              Array [
                0,
                4278190080,
              ]
            }
            fillOpacity={1}
            fillRule={1}
            font={Object {}}
            matrix={
              Array [
                1,
                0,
                0,
                1,
                0,
                0,
              ]
            }
            opacity={1}
            originX={0}
            originY={0}
            propList={Array []}
            rotation={0}
            scaleX={1}
            scaleY={1}
            skewX={0}
            skewY={0}
            stroke={null}
            strokeDasharray={null}
            strokeDashoffset={null}
            strokeLinecap={0}
            strokeLinejoin={0}
            strokeMiterlimit={4}
            strokeOpacity={1}
            strokeWidth={1}
            vectorEffect={0}
            x={0}
            y={0}
          >
            <RNSVGPath
              d="M8.84799129,0 L13.7577354,0 L22.6057267,24 L0,24 L8.84799129,0 Z M6.52559608,19.4398694 L16.0921502,19.4398694 L11.4494502,5.83629831 L11.1682961,5.83629831 L6.52559608,19.4398694 Z"
              fill={
                Array [
                  0,
                  4278216557,
                ]
              }
              fillOpacity={1}
              fillRule={1}
              matrix={
                Array [
                  1,
                  0,
                  0,
                  1,
                  0,
                  0,
                ]
              }
              opacity={1}
              originX={0}
              originY={0}
              propList={
                Array [
                  "fill",
                ]
              }
              rotation={0}
              scaleX={1}
              scaleY={1}
              skewX={0}
              skewY={0}
              stroke={null}
              strokeDasharray={null}
              strokeDashoffset={null}
              strokeLinecap={0}
              strokeLinejoin={0}
              strokeMiterlimit={4}
              strokeOpacity={1}
              strokeWidth={1}
              vectorEffect={0}
              x={0}
              y={0}
            />
          </RNSVGGroup>
        </RNSVGSvgView>
      </View>
      <View
        style={
          Object {
            "paddingBottom": 8,
          }
        }
      >
        <Text
          style={
            Object {
              "color": "#00676D",
              "fontFamily": "InterUI-Black",
              "fontSize": 36,
              "lineHeight": 41.4,
            }
          }
        />
      </View>
      <Text
        style={
          Object {
            "color": "rgba(39, 39, 46, 0.6)",
            "fontFamily": "InterUI-Medium",
            "fontSize": 14,
            "lineHeight": 21,
          }
        }
      />
    </View>
  </View>
</View>
`;

exports[`The Onboarding Slide component should render children alone 1`] = `
<View
  style={
    Object {
      "flex": 1,
    }
  }
>
  <View
    onLayout={[Function]}
    pointerEvents="box-none"
    style={
      Array [
        Object {
          "bottom": 0,
          "left": 0,
          "overflow": "hidden",
          "position": "absolute",
          "right": 0,
          "top": 0,
        },
        Object {},
      ]
    }
  />
  <View
    style={
      Object {
        "marginBottom": 48,
        "paddingHorizontal": 16,
        "paddingTop": 16,
      }
    }
  >
    <View>
      <View
        style={
          Object {
            "paddingBottom": 8,
          }
        }
      >
        <Text
          style={
            Object {
              "color": "#00676D",
              "fontFamily": "InterUI-Black",
              "fontSize": 36,
              "lineHeight": 41.4,
            }
          }
        />
      </View>
      <Text
        style={
          Object {
            "color": "rgba(39, 39, 46, 0.6)",
            "fontFamily": "InterUI-Medium",
            "fontSize": 14,
            "lineHeight": 21,
          }
        }
      />
    </View>
    <Text>
      Great Scott!
    </Text>
  </View>
</View>
`;

exports[`The Onboarding Slide component should render with children 1`] = `
<View
  style={
    Object {
      "flex": 1,
    }
  }
>
  <View
    onLayout={[Function]}
    pointerEvents="box-none"
    style={
      Array [
        Object {
          "bottom": 0,
          "left": 0,
          "overflow": "hidden",
          "position": "absolute",
          "right": 0,
          "top": 0,
        },
        Object {},
      ]
    }
  />
  <View
    style={
      Object {
        "marginBottom": 48,
        "paddingHorizontal": 16,
        "paddingTop": 16,
      }
    }
  >
    <View>
      <View
        style={
          Object {
            "paddingBottom": 8,
          }
        }
      >
        <Text
          style={
            Object {
              "color": "#00676D",
              "fontFamily": "InterUI-Black",
              "fontSize": 36,
              "lineHeight": 41.4,
            }
          }
        >
          Whoa, this is heavy
        </Text>
      </View>
      <Text
        style={
          Object {
            "color": "rgba(39, 39, 46, 0.6)",
            "fontFamily": "InterUI-Medium",
            "fontSize": 14,
            "lineHeight": 21,
          }
        }
      >
        There's that word again: "heavy." Why are things so heavy in the future? Is there a problem with the Earth's gravitational pull?
      </Text>
    </View>
    <Text>
      Great Scott!
    </Text>
  </View>
</View>
`;
