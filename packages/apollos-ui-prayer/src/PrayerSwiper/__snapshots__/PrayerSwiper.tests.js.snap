// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`The PrayerSwiper component should render with a fragment as a child 1`] = `
<View
  onLayout={[Function]}
  style={
    Array [
      Object {
        "backgroundColor": "transparent",
        "flex": 1,
        "position": "relative",
      },
      undefined,
    ]
  }
>
  <RCTScrollView
    activeDot={
      <withOrientation
        forceInset={
          Object {
            "bottom": "always",
          }
        }
      >
        <mapProps(getContext(mapProps(withPropsOnChange(mapProps(View))))) />
      </withOrientation>
    }
    automaticallyAdjustContentInsets={false}
    autoplay={false}
    autoplayDirection={true}
    autoplayTimeout={2.5}
    bounces={false}
    contentContainerStyle={
      Array [
        Object {
          "backgroundColor": "transparent",
        },
        undefined,
      ]
    }
    contentOffset={
      Object {
        "x": 0,
      }
    }
    disableNextButton={false}
    disablePrevButton={false}
    dot={
      <withOrientation
        forceInset={
          Object {
            "bottom": "always",
          }
        }
      >
        <mapProps(getContext(mapProps(withPropsOnChange(mapProps(View)))))
          forceInset={
            Object {
              "bottom": "always",
            }
          }
        />
      </withOrientation>
    }
    horizontal={true}
    index={0}
    loadMinimal={true}
    loadMinimalSize={1}
    loop={false}
    onIndexChanged={[Function]}
    onMomentumScrollEnd={[Function]}
    onScrollBeginDrag={[Function]}
    onScrollEndDrag={[Function]}
    orientation="portrait"
    paginationStyle={
      Object {
        "alignItem": "flex-start",
        "bottom": null,
        "justifyContent": "flex-start",
        "left": 16,
      }
    }
    pagingEnabled={true}
    removeClippedSubviews={true}
    scrollsToTop={false}
    showsButtons={false}
    showsHorizontalScrollIndicator={false}
    showsPagination={true}
    showsVerticalScrollIndicator={false}
  >
    <View>
      <View
        style={
          Array [
            Object {
              "height": 1334,
              "width": 750,
            },
            Object {
              "backgroundColor": "transparent",
            },
          ]
        }
      >
        <View
          accessible={true}
          clickable={true}
          isTVSelectable={true}
          onClick={[Function]}
          onResponderGrant={[Function]}
          onResponderMove={[Function]}
          onResponderRelease={[Function]}
          onResponderTerminate={[Function]}
          onResponderTerminationRequest={[Function]}
          onStartShouldSetResponder={[Function]}
          style={
            Object {
              "opacity": 1,
            }
          }
        >
          <Text>
            1
          </Text>
        </View>
      </View>
      <View
        style={
          Array [
            Object {
              "height": 1334,
              "width": 750,
            },
            Object {
              "backgroundColor": "transparent",
            },
          ]
        }
      >
        <View
          accessible={true}
          clickable={true}
          isTVSelectable={true}
          onClick={[Function]}
          onResponderGrant={[Function]}
          onResponderMove={[Function]}
          onResponderRelease={[Function]}
          onResponderTerminate={[Function]}
          onResponderTerminationRequest={[Function]}
          onStartShouldSetResponder={[Function]}
          style={
            Object {
              "opacity": 1,
            }
          }
        >
          <Text>
            2
          </Text>
        </View>
      </View>
      <View
        style={
          Object {
            "alignItems": "center",
            "flex": 1,
            "height": 1334,
            "justifyContent": "center",
            "width": 750,
          }
        }
      >
        <ActivityIndicator
          animating={true}
          color="#999999"
          hidesWhenStopped={true}
          size="small"
        />
      </View>
    </View>
  </RCTScrollView>
  <View
    pointerEvents="none"
    style={
      Array [
        Object {
          "alignItems": "center",
          "backgroundColor": "transparent",
          "bottom": 25,
          "flex": 1,
          "flexDirection": "row",
          "justifyContent": "center",
          "left": 0,
          "position": "absolute",
          "right": 0,
        },
        Object {
          "alignItem": "flex-start",
          "bottom": null,
          "justifyContent": "flex-start",
          "left": 16,
        },
      ]
    }
  >
    <View
      onLayout={[Function]}
      pointerEvents="box-none"
      style={
        Object {
          "paddingBottom": 0,
          "paddingLeft": 0,
          "paddingRight": 0,
          "paddingTop": 20,
        }
      }
    >
      <View
        style={
          Object {
            "backgroundColor": "#00676D",
            "borderRadius": 2,
            "height": 2,
            "marginHorizontal": 1,
            "width": 24,
          }
        }
      />
    </View>
    <View
      onLayout={[Function]}
      pointerEvents="box-none"
      style={
        Object {
          "paddingBottom": 0,
          "paddingLeft": 0,
          "paddingRight": 0,
          "paddingTop": 20,
        }
      }
    >
      <View
        forceInset={
          Object {
            "bottom": "always",
          }
        }
        style={
          Object {
            "backgroundColor": Object {
              "color": Array [
                48,
                48,
                48,
              ],
              "model": "rgb",
              "valpha": 0.09999999999999998,
            },
            "borderRadius": 2,
            "height": 2,
            "marginHorizontal": 1,
            "width": 24,
          }
        }
      />
    </View>
    <View
      onLayout={[Function]}
      pointerEvents="box-none"
      style={
        Object {
          "paddingBottom": 0,
          "paddingLeft": 0,
          "paddingRight": 0,
          "paddingTop": 20,
        }
      }
    >
      <View
        forceInset={
          Object {
            "bottom": "always",
          }
        }
        style={
          Object {
            "backgroundColor": Object {
              "color": Array [
                48,
                48,
                48,
              ],
              "model": "rgb",
              "valpha": 0.09999999999999998,
            },
            "borderRadius": 2,
            "height": 2,
            "marginHorizontal": 1,
            "width": 24,
          }
        }
      />
    </View>
  </View>
</View>
`;

exports[`The PrayerSwiper component should render with an array as a child 1`] = `
<View
  onLayout={[Function]}
  style={
    Array [
      Object {
        "backgroundColor": "transparent",
        "flex": 1,
        "position": "relative",
      },
      undefined,
    ]
  }
>
  <RCTScrollView
    activeDot={
      <withOrientation
        forceInset={
          Object {
            "bottom": "always",
          }
        }
      >
        <mapProps(getContext(mapProps(withPropsOnChange(mapProps(View))))) />
      </withOrientation>
    }
    automaticallyAdjustContentInsets={false}
    autoplay={false}
    autoplayDirection={true}
    autoplayTimeout={2.5}
    bounces={false}
    contentContainerStyle={
      Array [
        Object {
          "backgroundColor": "transparent",
        },
        undefined,
      ]
    }
    contentOffset={
      Object {
        "x": 0,
      }
    }
    disableNextButton={false}
    disablePrevButton={false}
    dot={
      <withOrientation
        forceInset={
          Object {
            "bottom": "always",
          }
        }
      >
        <mapProps(getContext(mapProps(withPropsOnChange(mapProps(View)))))
          forceInset={
            Object {
              "bottom": "always",
            }
          }
        />
      </withOrientation>
    }
    horizontal={true}
    index={0}
    loadMinimal={true}
    loadMinimalSize={1}
    loop={false}
    onIndexChanged={[Function]}
    onMomentumScrollEnd={[Function]}
    onScrollBeginDrag={[Function]}
    onScrollEndDrag={[Function]}
    orientation="portrait"
    paginationStyle={
      Object {
        "alignItem": "flex-start",
        "bottom": null,
        "justifyContent": "flex-start",
        "left": 16,
      }
    }
    pagingEnabled={true}
    removeClippedSubviews={true}
    scrollsToTop={false}
    showsButtons={false}
    showsHorizontalScrollIndicator={false}
    showsPagination={true}
    showsVerticalScrollIndicator={false}
  >
    <View>
      <View
        style={
          Array [
            Object {
              "height": 1334,
              "width": 750,
            },
            Object {
              "backgroundColor": "transparent",
            },
          ]
        }
      >
        <View
          accessible={true}
          clickable={true}
          isTVSelectable={true}
          onClick={[Function]}
          onResponderGrant={[Function]}
          onResponderMove={[Function]}
          onResponderRelease={[Function]}
          onResponderTerminate={[Function]}
          onResponderTerminationRequest={[Function]}
          onStartShouldSetResponder={[Function]}
          style={
            Object {
              "opacity": 1,
            }
          }
        >
          <Text>
            1
          </Text>
        </View>
      </View>
      <View
        style={
          Array [
            Object {
              "height": 1334,
              "width": 750,
            },
            Object {
              "backgroundColor": "transparent",
            },
          ]
        }
      >
        <View
          accessible={true}
          clickable={true}
          isTVSelectable={true}
          onClick={[Function]}
          onResponderGrant={[Function]}
          onResponderMove={[Function]}
          onResponderRelease={[Function]}
          onResponderTerminate={[Function]}
          onResponderTerminationRequest={[Function]}
          onStartShouldSetResponder={[Function]}
          style={
            Object {
              "opacity": 1,
            }
          }
        >
          <Text>
            2
          </Text>
        </View>
      </View>
      <View
        style={
          Object {
            "alignItems": "center",
            "flex": 1,
            "height": 1334,
            "justifyContent": "center",
            "width": 750,
          }
        }
      >
        <ActivityIndicator
          animating={true}
          color="#999999"
          hidesWhenStopped={true}
          size="small"
        />
      </View>
    </View>
  </RCTScrollView>
  <View
    pointerEvents="none"
    style={
      Array [
        Object {
          "alignItems": "center",
          "backgroundColor": "transparent",
          "bottom": 25,
          "flex": 1,
          "flexDirection": "row",
          "justifyContent": "center",
          "left": 0,
          "position": "absolute",
          "right": 0,
        },
        Object {
          "alignItem": "flex-start",
          "bottom": null,
          "justifyContent": "flex-start",
          "left": 16,
        },
      ]
    }
  >
    <View
      onLayout={[Function]}
      pointerEvents="box-none"
      style={
        Object {
          "paddingBottom": 0,
          "paddingLeft": 0,
          "paddingRight": 0,
          "paddingTop": 20,
        }
      }
    >
      <View
        style={
          Object {
            "backgroundColor": "#00676D",
            "borderRadius": 2,
            "height": 2,
            "marginHorizontal": 1,
            "width": 24,
          }
        }
      />
    </View>
    <View
      onLayout={[Function]}
      pointerEvents="box-none"
      style={
        Object {
          "paddingBottom": 0,
          "paddingLeft": 0,
          "paddingRight": 0,
          "paddingTop": 20,
        }
      }
    >
      <View
        forceInset={
          Object {
            "bottom": "always",
          }
        }
        style={
          Object {
            "backgroundColor": Object {
              "color": Array [
                48,
                48,
                48,
              ],
              "model": "rgb",
              "valpha": 0.09999999999999998,
            },
            "borderRadius": 2,
            "height": 2,
            "marginHorizontal": 1,
            "width": 24,
          }
        }
      />
    </View>
    <View
      onLayout={[Function]}
      pointerEvents="box-none"
      style={
        Object {
          "paddingBottom": 0,
          "paddingLeft": 0,
          "paddingRight": 0,
          "paddingTop": 20,
        }
      }
    >
      <View
        forceInset={
          Object {
            "bottom": "always",
          }
        }
        style={
          Object {
            "backgroundColor": Object {
              "color": Array [
                48,
                48,
                48,
              ],
              "model": "rgb",
              "valpha": 0.09999999999999998,
            },
            "borderRadius": 2,
            "height": 2,
            "marginHorizontal": 1,
            "width": 24,
          }
        }
      />
    </View>
  </View>
</View>
`;
