// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`The TrackEventWhenLoaded component should track an event if mounted with loaded=false and then switching to true 1`] = `Array []`;

exports[`The TrackEventWhenLoaded component should track an event if mounted with loaded=false and then switching to true 2`] = `
Array [
  Array [
    Object {
      "client": ApolloClient {
        "__operations_cache__": Map {},
        "cache": InMemoryCache {
          "addTypename": true,
          "cacheKeyRoot": CacheKeyNode {
            "children": null,
            "key": null,
          },
          "config": Object {
            "addTypename": true,
            "dataIdFromObject": [Function],
            "fragmentMatcher": HeuristicFragmentMatcher {},
            "resultCaching": true,
          },
          "data": DepTrackingCache {
            "data": Object {},
            "depend": [Function],
          },
          "maybeBroadcastWatch": [Function],
          "optimisticData": DepTrackingCache {
            "data": Object {},
            "depend": [Function],
          },
          "silenceBroadcast": false,
          "storeReader": StoreReader {
            "cacheKeyRoot": CacheKeyNode {
              "children": null,
              "key": null,
            },
            "executeSelectionSet": [Function],
            "executeStoreQuery": [Function],
          },
          "storeWriter": StoreWriter {},
          "typenameDocumentCache": Map {},
          "watches": Set {},
        },
        "clearStoreCallbacks": Array [],
        "clientAwareness": Object {},
        "defaultOptions": Object {},
        "disableNetworkFetches": false,
        "link": ApolloLink {
          "request": [Function],
        },
        "localState": LocalState {
          "cache": InMemoryCache {
            "addTypename": true,
            "cacheKeyRoot": CacheKeyNode {
              "children": null,
              "key": null,
            },
            "config": Object {
              "addTypename": true,
              "dataIdFromObject": [Function],
              "fragmentMatcher": HeuristicFragmentMatcher {},
              "resultCaching": true,
            },
            "data": DepTrackingCache {
              "data": Object {},
              "depend": [Function],
            },
            "maybeBroadcastWatch": [Function],
            "optimisticData": DepTrackingCache {
              "data": Object {},
              "depend": [Function],
            },
            "silenceBroadcast": false,
            "storeReader": StoreReader {
              "cacheKeyRoot": CacheKeyNode {
                "children": null,
                "key": null,
              },
              "executeSelectionSet": [Function],
              "executeStoreQuery": [Function],
            },
            "storeWriter": StoreWriter {},
            "typenameDocumentCache": Map {},
            "watches": Set {},
          },
          "client": [Circular],
          "resolvers": Object {
            "Mutation": Object {
              "cacheMarkLoaded": [Function],
              "handleLogin": [Function],
              "logout": [Function],
              "mediaPlayerPlayNow": [Function],
              "mediaPlayerSetPlayhead": [Function],
              "mediaPlayerUpdateState": [Function],
              "updateDevicePushId": [Function],
              "updatePushPermissions": [Function],
            },
            "Query": Object {
              "authToken": [Function],
              "isLoggedIn": [Function],
              "notificationsEnabled": [Function],
            },
          },
        },
        "mutate": [Function],
        "query": [Function],
        "queryDeduplication": true,
        "reFetchObservableQueries": [Function],
        "resetStore": [Function],
        "resetStoreCallbacks": Array [],
        "ssrMode": false,
        "store": DataStore {
          "cache": InMemoryCache {
            "addTypename": true,
            "cacheKeyRoot": CacheKeyNode {
              "children": null,
              "key": null,
            },
            "config": Object {
              "addTypename": true,
              "dataIdFromObject": [Function],
              "fragmentMatcher": HeuristicFragmentMatcher {},
              "resultCaching": true,
            },
            "data": DepTrackingCache {
              "data": Object {},
              "depend": [Function],
            },
            "maybeBroadcastWatch": [Function],
            "optimisticData": DepTrackingCache {
              "data": Object {},
              "depend": [Function],
            },
            "silenceBroadcast": false,
            "storeReader": StoreReader {
              "cacheKeyRoot": CacheKeyNode {
                "children": null,
                "key": null,
              },
              "executeSelectionSet": [Function],
              "executeStoreQuery": [Function],
            },
            "storeWriter": StoreWriter {},
            "typenameDocumentCache": Map {},
            "watches": Set {},
          },
        },
        "typeDefs": undefined,
        "version": "2.5.1",
        "watchQuery": [Function],
      },
      "eventName": "Track Something",
      "properties": Object {
        "ThingId": "1234",
      },
    },
  ],
]
`;

exports[`The TrackEventWhenLoaded component should track an event if mounted with loaded=true 1`] = `
Array [
  Array [
    Object {
      "client": ApolloClient {
        "__operations_cache__": Map {},
        "cache": InMemoryCache {
          "addTypename": true,
          "cacheKeyRoot": CacheKeyNode {
            "children": null,
            "key": null,
          },
          "config": Object {
            "addTypename": true,
            "dataIdFromObject": [Function],
            "fragmentMatcher": HeuristicFragmentMatcher {},
            "resultCaching": true,
          },
          "data": DepTrackingCache {
            "data": Object {},
            "depend": [Function],
          },
          "maybeBroadcastWatch": [Function],
          "optimisticData": DepTrackingCache {
            "data": Object {},
            "depend": [Function],
          },
          "silenceBroadcast": false,
          "storeReader": StoreReader {
            "cacheKeyRoot": CacheKeyNode {
              "children": null,
              "key": null,
            },
            "executeSelectionSet": [Function],
            "executeStoreQuery": [Function],
          },
          "storeWriter": StoreWriter {},
          "typenameDocumentCache": Map {},
          "watches": Set {},
        },
        "clearStoreCallbacks": Array [],
        "clientAwareness": Object {},
        "defaultOptions": Object {},
        "disableNetworkFetches": false,
        "link": ApolloLink {
          "request": [Function],
        },
        "localState": LocalState {
          "cache": InMemoryCache {
            "addTypename": true,
            "cacheKeyRoot": CacheKeyNode {
              "children": null,
              "key": null,
            },
            "config": Object {
              "addTypename": true,
              "dataIdFromObject": [Function],
              "fragmentMatcher": HeuristicFragmentMatcher {},
              "resultCaching": true,
            },
            "data": DepTrackingCache {
              "data": Object {},
              "depend": [Function],
            },
            "maybeBroadcastWatch": [Function],
            "optimisticData": DepTrackingCache {
              "data": Object {},
              "depend": [Function],
            },
            "silenceBroadcast": false,
            "storeReader": StoreReader {
              "cacheKeyRoot": CacheKeyNode {
                "children": null,
                "key": null,
              },
              "executeSelectionSet": [Function],
              "executeStoreQuery": [Function],
            },
            "storeWriter": StoreWriter {},
            "typenameDocumentCache": Map {},
            "watches": Set {},
          },
          "client": [Circular],
          "resolvers": Object {
            "Mutation": Object {
              "cacheMarkLoaded": [Function],
              "handleLogin": [Function],
              "logout": [Function],
              "mediaPlayerPlayNow": [Function],
              "mediaPlayerSetPlayhead": [Function],
              "mediaPlayerUpdateState": [Function],
              "updateDevicePushId": [Function],
              "updatePushPermissions": [Function],
            },
            "Query": Object {
              "authToken": [Function],
              "isLoggedIn": [Function],
              "notificationsEnabled": [Function],
            },
          },
        },
        "mutate": [Function],
        "query": [Function],
        "queryDeduplication": true,
        "reFetchObservableQueries": [Function],
        "resetStore": [Function],
        "resetStoreCallbacks": Array [],
        "ssrMode": false,
        "store": DataStore {
          "cache": InMemoryCache {
            "addTypename": true,
            "cacheKeyRoot": CacheKeyNode {
              "children": null,
              "key": null,
            },
            "config": Object {
              "addTypename": true,
              "dataIdFromObject": [Function],
              "fragmentMatcher": HeuristicFragmentMatcher {},
              "resultCaching": true,
            },
            "data": DepTrackingCache {
              "data": Object {},
              "depend": [Function],
            },
            "maybeBroadcastWatch": [Function],
            "optimisticData": DepTrackingCache {
              "data": Object {},
              "depend": [Function],
            },
            "silenceBroadcast": false,
            "storeReader": StoreReader {
              "cacheKeyRoot": CacheKeyNode {
                "children": null,
                "key": null,
              },
              "executeSelectionSet": [Function],
              "executeStoreQuery": [Function],
            },
            "storeWriter": StoreWriter {},
            "typenameDocumentCache": Map {},
            "watches": Set {},
          },
        },
        "typeDefs": undefined,
        "version": "2.5.1",
        "watchQuery": [Function],
      },
      "eventName": "Track Something",
      "properties": Object {
        "ThingId": "1234",
      },
    },
  ],
]
`;
