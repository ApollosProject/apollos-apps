// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`the HorizontalContentFeed component renders a horizontal content feed 1`] = `
<RCTScrollView
  contentContainerStyle={
    Object {
      "padding": 8,
      "paddingBottom": 0,
    }
  }
  data={
    Array [
      Object {
        "__typename": "DevotionalContentItem",
        "coverImage": Object {
          "__typename": "ImageMedia",
          "name": "Square Image",
          "sources": Array [
            Object {
              "__typename": "ImageMediaSource",
              "uri": "https://res.cloudinary.com/apollos/image/fetch/c_limit,f_auto,w_1600/https://apollosrock.newspring.cc/GetImage.ashx%3Fguid%3D31af1a61-360c-4b1e-8e62-45517c06a9a2",
            },
          ],
        },
        "id": "DevotionalContentItem:d395278cd4b68e074ca4e595c8feab6d",
        "parentChannel": Object {
          "__typename": "ContentChannel",
          "iconName": "text",
          "id": "ContentChannel:559b23fd0aa90e81b1c023e72e230fa1",
          "name": "Devotional",
        },
        "sharing": Object {
          "__typename": "SharableContentItem",
          "message": "God sees who you can be not who you are - Life is challenging enough.",
          "title": "Share via ...",
          "url": "https://apollosrock.newspring.cc/devotional/god-sees-who-you-can-be-not-who-you-are",
        },
        "title": "God sees who you can be not who you are",
      },
      Object {
        "__typename": "DevotionalContentItem",
        "coverImage": Object {
          "__typename": "ImageMedia",
          "name": "Square Image",
          "sources": Array [
            Object {
              "__typename": "ImageMediaSource",
              "uri": "https://res.cloudinary.com/apollos/image/fetch/c_limit,f_auto,w_1600/https://apollosrock.newspring.cc/GetImage.ashx%3Fguid%3D31af1a61-360c-4b1e-8e62-45517c06a9a2",
            },
          ],
        },
        "id": "DevotionalContentItem:fbea6914a3e8877516cbd333d919075d",
        "parentChannel": Object {
          "__typename": "ContentChannel",
          "iconName": "text",
          "id": "ContentChannel:559b23fd0aa90e81b1c023e72e230fa1",
          "name": "Devotional",
        },
        "sharing": Object {
          "__typename": "SharableContentItem",
          "message": "Thank God for the friends who will tell it like it is - Some of us grew up in a sanitized church.",
          "title": "Share via ...",
          "url": "https://apollosrock.newspring.cc/devotional/thank-god-for-the-friends-who-will-tell-it-like-it-is",
        },
        "title": "Thank God for the friends who will tell it like it is",
      },
      Object {
        "__typename": "DevotionalContentItem",
        "coverImage": Object {
          "__typename": "ImageMedia",
          "name": "Square Image",
          "sources": Array [
            Object {
              "__typename": "ImageMediaSource",
              "uri": "https://res.cloudinary.com/apollos/image/fetch/c_limit,f_auto,w_1600/https://apollosrock.newspring.cc/GetImage.ashx%3Fguid%3D31af1a61-360c-4b1e-8e62-45517c06a9a2",
            },
          ],
        },
        "id": "DevotionalContentItem:5e18250f586ab8de4d3d6292c919dcc4",
        "parentChannel": Object {
          "__typename": "ContentChannel",
          "iconName": "text",
          "id": "ContentChannel:559b23fd0aa90e81b1c023e72e230fa1",
          "name": "Devotional",
        },
        "sharing": Object {
          "__typename": "SharableContentItem",
          "message": "No sin is too bad - In Jeremiah 3, Godâ€™s people had really messed up.",
          "title": "Share via ...",
          "url": "https://apollosrock.newspring.cc/devotional/no-sin-is-too-bad",
        },
        "title": "No sin is too bad",
      },
      Object {
        "__typename": "DevotionalContentItem",
        "coverImage": Object {
          "__typename": "ImageMedia",
          "name": "Square Image",
          "sources": Array [
            Object {
              "__typename": "ImageMediaSource",
              "uri": "https://res.cloudinary.com/apollos/image/fetch/c_limit,f_auto,w_1600/https://apollosrock.newspring.cc/GetImage.ashx%3Fguid%3D31af1a61-360c-4b1e-8e62-45517c06a9a2",
            },
          ],
        },
        "id": "DevotionalContentItem:bdc2c29b85949e4ca8232b373a07953d",
        "parentChannel": Object {
          "__typename": "ContentChannel",
          "iconName": "text",
          "id": "ContentChannel:559b23fd0aa90e81b1c023e72e230fa1",
          "name": "Devotional",
        },
        "sharing": Object {
          "__typename": "SharableContentItem",
          "message": "Change starts with a choice - Have you ever restored an old piece of furniture?",
          "title": "Share via ...",
          "url": "https://apollosrock.newspring.cc/devotional/change-starts-with-a-choice",
        },
        "title": "Change starts with a choice",
      },
    ]
  }
  decelerationRate="fast"
  disableVirtualization={false}
  getItem={[Function]}
  getItemCount={[Function]}
  getItemLayout={[Function]}
  horizontal={true}
  initialNumToRender={10}
  initialScrollIndex={0}
  keyExtractor={[Function]}
  loadingStateObject={
    Object {
      "node": Object {
        "id": "fakeId0",
        "isLoading": true,
        "title": "",
      },
    }
  }
  maxToRenderPerBatch={10}
  numColumns={1}
  onContentSizeChange={[Function]}
  onEndReached={[Function]}
  onEndReachedThreshold={2}
  onLayout={[Function]}
  onMomentumScrollEnd={[Function]}
  onScroll={[Function]}
  onScrollBeginDrag={[Function]}
  onScrollEndDrag={[Function]}
  refreshing={false}
  removeClippedSubviews={false}
  renderItem={[Function]}
  scrollEventThrottle={50}
  showsHorizontalScrollIndicator={false}
  snapToAlignment="start"
  snapToInterval={256}
  stickyHeaderIndices={Array []}
  updateCellsBatchingPeriod={50}
  viewabilityConfigCallbackPairs={Array []}
  windowSize={21}
>
  <View>
    <View
      style={
        Array [
          Object {
            "flexDirection": "row",
          },
          null,
        ]
      }
    >
      <View
        accessible={true}
        clickable={true}
        onClick={[Function]}
        onResponderGrant={[Function]}
        onResponderMove={[Function]}
        onResponderRelease={[Function]}
        onResponderTerminate={[Function]}
        onResponderTerminationRequest={[Function]}
        onStartShouldSetResponder={[Function]}
        style={
          Object {
            "transform": Array [
              Object {
                "scale": 1,
              },
            ],
          }
        }
      >
        <View
          inHorizontalList={true}
          isLoading={true}
          style={
            Object {
              "backgroundColor": "#FFFFFF",
              "borderRadius": 16,
              "height": 240,
              "margin": 8,
              "shadowColor": "rgba(165, 165, 165, 0.6)",
              "shadowOffset": Object {
                "height": 1,
                "width": 0,
              },
              "shadowOpacity": 1,
              "shadowRadius": 6,
              "width": 240,
            }
          }
        >
          <View
            style={
              Object {
                "borderRadius": 16,
                "overflow": "hidden",
              }
            }
          >
            <View
              style={
                Object {
                  "backgroundColor": "#A5A5A5",
                  "overflow": "hidden",
                  "width": "100%",
                }
              }
            >
              <View
                animate={null}
                customAnimate={null}
                forceRatio={1.5}
                onReady={false}
                style={
                  Object {
                    "aspectRatio": 1.5,
                    "backgroundColor": "#A5A5A5",
                    "resizeMode": "cover",
                    "width": "100%",
                  }
                }
              >
                <Image
                  hasTitleAndSummary={false}
                  maxAspectRatio={1.5}
                  minAspectRatio={1.5}
                  onLoad={[Function]}
                  source={Array []}
                  style={
                    Object {
                      "aspectRatio": 1,
                      "backgroundColor": "#A5A5A5",
                      "opacity": 0,
                      "resizeMode": "cover",
                      "width": "100%",
                    }
                  }
                />
              </View>
              <BVLinearGradient
                colors={
                  Array [
                    2147483648,
                    0,
                  ]
                }
                endPoint={
                  Object {
                    "x": 0,
                    "y": 1,
                  }
                }
                locations={
                  Array [
                    0,
                    1,
                  ]
                }
                overlayColor="#000000"
                overlayType="gradient-top"
                startPoint={
                  Object {
                    "x": 0,
                    "y": 0,
                  }
                }
                style={
                  Object {
                    "bottom": 0,
                    "left": 0,
                    "position": "absolute",
                    "right": 0,
                    "top": 0,
                  }
                }
              />
            </View>
            <View
              style={
                Object {
                  "alignItems": "flex-start",
                  "paddingBottom": 24,
                  "paddingHorizontal": 16,
                  "paddingVertical": 16,
                }
              }
            />
          </View>
        </View>
      </View>
    </View>
    <View
      style={
        Array [
          Object {
            "flexDirection": "row",
          },
          null,
        ]
      }
    >
      <View
        accessible={true}
        clickable={true}
        onClick={[Function]}
        onResponderGrant={[Function]}
        onResponderMove={[Function]}
        onResponderRelease={[Function]}
        onResponderTerminate={[Function]}
        onResponderTerminationRequest={[Function]}
        onStartShouldSetResponder={[Function]}
        style={
          Object {
            "transform": Array [
              Object {
                "scale": 1,
              },
            ],
          }
        }
      >
        <View
          inHorizontalList={true}
          isLoading={true}
          style={
            Object {
              "backgroundColor": "#FFFFFF",
              "borderRadius": 16,
              "height": 240,
              "margin": 8,
              "shadowColor": "rgba(165, 165, 165, 0.6)",
              "shadowOffset": Object {
                "height": 1,
                "width": 0,
              },
              "shadowOpacity": 1,
              "shadowRadius": 6,
              "width": 240,
            }
          }
        >
          <View
            style={
              Object {
                "borderRadius": 16,
                "overflow": "hidden",
              }
            }
          >
            <View
              style={
                Object {
                  "backgroundColor": "#A5A5A5",
                  "overflow": "hidden",
                  "width": "100%",
                }
              }
            >
              <View
                animate={null}
                customAnimate={null}
                forceRatio={1.5}
                onReady={false}
                style={
                  Object {
                    "aspectRatio": 1.5,
                    "backgroundColor": "#A5A5A5",
                    "resizeMode": "cover",
                    "width": "100%",
                  }
                }
              >
                <Image
                  hasTitleAndSummary={false}
                  maxAspectRatio={1.5}
                  minAspectRatio={1.5}
                  onLoad={[Function]}
                  source={Array []}
                  style={
                    Object {
                      "aspectRatio": 1,
                      "backgroundColor": "#A5A5A5",
                      "opacity": 0,
                      "resizeMode": "cover",
                      "width": "100%",
                    }
                  }
                />
              </View>
              <BVLinearGradient
                colors={
                  Array [
                    2147483648,
                    0,
                  ]
                }
                endPoint={
                  Object {
                    "x": 0,
                    "y": 1,
                  }
                }
                locations={
                  Array [
                    0,
                    1,
                  ]
                }
                overlayColor="#000000"
                overlayType="gradient-top"
                startPoint={
                  Object {
                    "x": 0,
                    "y": 0,
                  }
                }
                style={
                  Object {
                    "bottom": 0,
                    "left": 0,
                    "position": "absolute",
                    "right": 0,
                    "top": 0,
                  }
                }
              />
            </View>
            <View
              style={
                Object {
                  "alignItems": "flex-start",
                  "paddingBottom": 24,
                  "paddingHorizontal": 16,
                  "paddingVertical": 16,
                }
              }
            />
          </View>
        </View>
      </View>
    </View>
    <View
      style={
        Array [
          Object {
            "flexDirection": "row",
          },
          null,
        ]
      }
    >
      <View
        accessible={true}
        clickable={true}
        onClick={[Function]}
        onResponderGrant={[Function]}
        onResponderMove={[Function]}
        onResponderRelease={[Function]}
        onResponderTerminate={[Function]}
        onResponderTerminationRequest={[Function]}
        onStartShouldSetResponder={[Function]}
        style={
          Object {
            "transform": Array [
              Object {
                "scale": 1,
              },
            ],
          }
        }
      >
        <View
          inHorizontalList={true}
          isLoading={true}
          style={
            Object {
              "backgroundColor": "#FFFFFF",
              "borderRadius": 16,
              "height": 240,
              "margin": 8,
              "shadowColor": "rgba(165, 165, 165, 0.6)",
              "shadowOffset": Object {
                "height": 1,
                "width": 0,
              },
              "shadowOpacity": 1,
              "shadowRadius": 6,
              "width": 240,
            }
          }
        >
          <View
            style={
              Object {
                "borderRadius": 16,
                "overflow": "hidden",
              }
            }
          >
            <View
              style={
                Object {
                  "backgroundColor": "#A5A5A5",
                  "overflow": "hidden",
                  "width": "100%",
                }
              }
            >
              <View
                animate={null}
                customAnimate={null}
                forceRatio={1.5}
                onReady={false}
                style={
                  Object {
                    "aspectRatio": 1.5,
                    "backgroundColor": "#A5A5A5",
                    "resizeMode": "cover",
                    "width": "100%",
                  }
                }
              >
                <Image
                  hasTitleAndSummary={false}
                  maxAspectRatio={1.5}
                  minAspectRatio={1.5}
                  onLoad={[Function]}
                  source={Array []}
                  style={
                    Object {
                      "aspectRatio": 1,
                      "backgroundColor": "#A5A5A5",
                      "opacity": 0,
                      "resizeMode": "cover",
                      "width": "100%",
                    }
                  }
                />
              </View>
              <BVLinearGradient
                colors={
                  Array [
                    2147483648,
                    0,
                  ]
                }
                endPoint={
                  Object {
                    "x": 0,
                    "y": 1,
                  }
                }
                locations={
                  Array [
                    0,
                    1,
                  ]
                }
                overlayColor="#000000"
                overlayType="gradient-top"
                startPoint={
                  Object {
                    "x": 0,
                    "y": 0,
                  }
                }
                style={
                  Object {
                    "bottom": 0,
                    "left": 0,
                    "position": "absolute",
                    "right": 0,
                    "top": 0,
                  }
                }
              />
            </View>
            <View
              style={
                Object {
                  "alignItems": "flex-start",
                  "paddingBottom": 24,
                  "paddingHorizontal": 16,
                  "paddingVertical": 16,
                }
              }
            />
          </View>
        </View>
      </View>
    </View>
    <View
      style={
        Array [
          Object {
            "flexDirection": "row",
          },
          null,
        ]
      }
    >
      <View
        accessible={true}
        clickable={true}
        onClick={[Function]}
        onResponderGrant={[Function]}
        onResponderMove={[Function]}
        onResponderRelease={[Function]}
        onResponderTerminate={[Function]}
        onResponderTerminationRequest={[Function]}
        onStartShouldSetResponder={[Function]}
        style={
          Object {
            "transform": Array [
              Object {
                "scale": 1,
              },
            ],
          }
        }
      >
        <View
          inHorizontalList={true}
          isLoading={true}
          style={
            Object {
              "backgroundColor": "#FFFFFF",
              "borderRadius": 16,
              "height": 240,
              "margin": 8,
              "shadowColor": "rgba(165, 165, 165, 0.6)",
              "shadowOffset": Object {
                "height": 1,
                "width": 0,
              },
              "shadowOpacity": 1,
              "shadowRadius": 6,
              "width": 240,
            }
          }
        >
          <View
            style={
              Object {
                "borderRadius": 16,
                "overflow": "hidden",
              }
            }
          >
            <View
              style={
                Object {
                  "backgroundColor": "#A5A5A5",
                  "overflow": "hidden",
                  "width": "100%",
                }
              }
            >
              <View
                animate={null}
                customAnimate={null}
                forceRatio={1.5}
                onReady={false}
                style={
                  Object {
                    "aspectRatio": 1.5,
                    "backgroundColor": "#A5A5A5",
                    "resizeMode": "cover",
                    "width": "100%",
                  }
                }
              >
                <Image
                  hasTitleAndSummary={false}
                  maxAspectRatio={1.5}
                  minAspectRatio={1.5}
                  onLoad={[Function]}
                  source={Array []}
                  style={
                    Object {
                      "aspectRatio": 1,
                      "backgroundColor": "#A5A5A5",
                      "opacity": 0,
                      "resizeMode": "cover",
                      "width": "100%",
                    }
                  }
                />
              </View>
              <BVLinearGradient
                colors={
                  Array [
                    2147483648,
                    0,
                  ]
                }
                endPoint={
                  Object {
                    "x": 0,
                    "y": 1,
                  }
                }
                locations={
                  Array [
                    0,
                    1,
                  ]
                }
                overlayColor="#000000"
                overlayType="gradient-top"
                startPoint={
                  Object {
                    "x": 0,
                    "y": 0,
                  }
                }
                style={
                  Object {
                    "bottom": 0,
                    "left": 0,
                    "position": "absolute",
                    "right": 0,
                    "top": 0,
                  }
                }
              />
            </View>
            <View
              style={
                Object {
                  "alignItems": "flex-start",
                  "paddingBottom": 24,
                  "paddingHorizontal": 16,
                  "paddingVertical": 16,
                }
              }
            />
          </View>
        </View>
      </View>
    </View>
  </View>
</RCTScrollView>
`;
