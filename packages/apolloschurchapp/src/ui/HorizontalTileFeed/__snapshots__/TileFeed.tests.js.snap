// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`The TileFeed component renders correctly 1`] = `
<RCTScrollView
  data={
    Array [
      Object {
        "node": Object {
          "id": "fakeId0",
          "title": "Why Jesus is Timeless",
        },
      },
      Object {
        "node": Object {
          "id": "fakeId1",
          "title": "Why Jesus is Timeless",
        },
      },
    ]
  }
  decelerationRate="fast"
  disableVirtualization={false}
  getItem={[Function]}
  getItemCount={[Function]}
  horizontal={true}
  initialNumToRender={10}
  initialScrollIndex={0}
  keyExtractor={[Function]}
  loadingStateObject={
    Object {
      "id": "fakeId0",
      "isLoading": false,
      "title": "",
    }
  }
  maxToRenderPerBatch={10}
  numColumns={1}
  onContentSizeChange={[Function]}
  onEndReachedThreshold={2}
  onLayout={[Function]}
  onMomentumScrollEnd={[Function]}
  onScroll={[Function]}
  onScrollBeginDrag={[Function]}
  onScrollEndDrag={[Function]}
  refreshing={false}
  renderItem={[Function]}
  scrollEventThrottle={50}
  showsHorizontalScrollIndicator={false}
  snapToAlignment="start"
  snapToInterval={590}
  stickyHeaderIndices={Array []}
  style={
    Object {
      "height": 600,
      "paddingBottom": 10,
      "paddingHorizontal": 10,
    }
  }
  tileHeight={600}
  updateCellsBatchingPeriod={50}
  viewabilityConfigCallbackPairs={Array []}
  windowSize={21}
>
  <View>
    <View
      onLayout={[Function]}
      style={
        Array [
          Object {
            "flexDirection": "row",
          },
          null,
        ]
      }
    >
      <View
        collapsable={false}
        style={
          Object {
            "padding": 10,
          }
        }
      >
        <View
          style={
            Object {
              "aspectRatio": 1,
              "backgroundColor": "#A5A5A5",
              "borderRadius": 6,
              "height": "100%",
            }
          }
        >
          <View
            style={
              Object {
                "borderRadius": 6,
                "bottom": 0,
                "justifyContent": "center",
                "left": 0,
                "overflow": "hidden",
                "position": "absolute",
                "right": 0,
                "top": 0,
              }
            }
          >
            <View
              size={1}
              style={
                Object {
                  "alignItems": "center",
                  "backgroundColor": "#FFFFFF",
                  "borderBottomRightRadius": 6,
                  "borderTopLeftRadius": 6,
                  "height": 32,
                  "justifyContent": "center",
                  "left": 0,
                  "position": "absolute",
                  "top": 0,
                  "width": 32,
                }
              }
            >
              <View>
                <Text
                  style={
                    Object {
                      "color": "#303030",
                      "fontFamily": "InterUI-Medium",
                      "fontSize": 14,
                      "lineHeight": 20.16,
                    }
                  }
                >
                  1
                </Text>
              </View>
            </View>
          </View>
        </View>
      </View>
    </View>
    <View
      onLayout={[Function]}
      style={
        Array [
          Object {
            "flexDirection": "row",
          },
          null,
        ]
      }
    >
      <View
        collapsable={false}
        style={
          Object {
            "padding": 10,
          }
        }
      >
        <View
          style={
            Object {
              "aspectRatio": 1,
              "backgroundColor": "#A5A5A5",
              "borderRadius": 6,
              "height": "100%",
            }
          }
        >
          <View
            style={
              Object {
                "borderRadius": 6,
                "bottom": 0,
                "justifyContent": "center",
                "left": 0,
                "overflow": "hidden",
                "position": "absolute",
                "right": 0,
                "top": 0,
              }
            }
          >
            <View
              size={1}
              style={
                Object {
                  "alignItems": "center",
                  "backgroundColor": "#FFFFFF",
                  "borderBottomRightRadius": 6,
                  "borderTopLeftRadius": 6,
                  "height": 32,
                  "justifyContent": "center",
                  "left": 0,
                  "position": "absolute",
                  "top": 0,
                  "width": 32,
                }
              }
            >
              <View>
                <Text
                  style={
                    Object {
                      "color": "#303030",
                      "fontFamily": "InterUI-Medium",
                      "fontSize": 14,
                      "lineHeight": 20.16,
                    }
                  }
                >
                  2
                </Text>
              </View>
            </View>
          </View>
        </View>
      </View>
    </View>
  </View>
</RCTScrollView>
`;

exports[`The TileFeed component renders empty state 1`] = `
<RCTScrollView
  data={Array []}
  decelerationRate="fast"
  disableVirtualization={false}
  getItem={[Function]}
  getItemCount={[Function]}
  horizontal={true}
  initialNumToRender={10}
  initialScrollIndex={0}
  keyExtractor={[Function]}
  loadingStateObject={
    Object {
      "id": "fakeId0",
      "isLoading": true,
      "title": "",
    }
  }
  maxToRenderPerBatch={10}
  numColumns={1}
  onContentSizeChange={[Function]}
  onEndReachedThreshold={2}
  onLayout={[Function]}
  onMomentumScrollEnd={[Function]}
  onScroll={[Function]}
  onScrollBeginDrag={[Function]}
  onScrollEndDrag={[Function]}
  refreshing={true}
  renderItem={[Function]}
  scrollEventThrottle={50}
  showsHorizontalScrollIndicator={false}
  snapToAlignment="start"
  snapToInterval={590}
  stickyHeaderIndices={Array []}
  style={
    Object {
      "height": 600,
      "paddingBottom": 10,
      "paddingHorizontal": 10,
    }
  }
  tileHeight={600}
  updateCellsBatchingPeriod={50}
  viewabilityConfigCallbackPairs={Array []}
  windowSize={21}
>
  <View />
</RCTScrollView>
`;
