// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`the UpNextButtonConnected accepts doneText, continueText and Component as props,  1`] = `
<View
  disabled={false}
  loading={false}
  onPress={[Function]}
>
  Hold on cowboy, you got more to do
</View>
`;

exports[`the UpNextButtonConnected renders a continue state even with no children 1`] = `
<View
  accessible={true}
  clickable={true}
  isTVSelectable={true}
  onClick={[Function]}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  style={
    Object {
      "opacity": 1,
    }
  }
>
  <View
    bordered={false}
    disabled={false}
    pill={true}
    style={
      Object {
        "alignItems": "center",
        "backgroundColor": "#00676D",
        "borderColor": "#00676D",
        "borderRadius": 48,
        "borderWidth": 2,
        "elevation": 2,
        "flexDirection": "row",
        "height": 48,
        "justifyContent": "center",
        "marginHorizontal": 16,
        "opacity": 1,
        "overflow": "hidden",
        "paddingHorizontal": 16,
      }
    }
  >
    <Text
      style={
        Object {
          "color": "#FFFFFF",
          "fontFamily": "InterUI-Bold",
          "fontSize": 16,
          "lineHeight": 24,
        }
      }
    >
      Continue
    </Text>
  </View>
</View>
`;

exports[`the UpNextButtonConnected renders a continue state when in progress 1`] = `
<View
  accessible={true}
  clickable={true}
  isTVSelectable={true}
  onClick={[Function]}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  style={
    Object {
      "opacity": 1,
    }
  }
>
  <View
    bordered={false}
    disabled={false}
    pill={true}
    style={
      Object {
        "alignItems": "center",
        "backgroundColor": "#00676D",
        "borderColor": "#00676D",
        "borderRadius": 48,
        "borderWidth": 2,
        "elevation": 2,
        "flexDirection": "row",
        "height": 48,
        "justifyContent": "center",
        "marginHorizontal": 16,
        "opacity": 1,
        "overflow": "hidden",
        "paddingHorizontal": 16,
      }
    }
  >
    <Text
      style={
        Object {
          "color": "#FFFFFF",
          "fontFamily": "InterUI-Bold",
          "fontSize": 16,
          "lineHeight": 24,
        }
      }
    >
      Continue
    </Text>
  </View>
</View>
`;

exports[`the UpNextButtonConnected renders a finished state when finished 1`] = `
<View
  bordered={false}
  disabled={true}
  pill={true}
  style={
    Object {
      "alignItems": "center",
      "backgroundColor": "#00676D",
      "borderColor": "#00676D",
      "borderRadius": 48,
      "borderWidth": 2,
      "elevation": 2,
      "flexDirection": "row",
      "height": 48,
      "justifyContent": "center",
      "marginHorizontal": 16,
      "opacity": 0.5,
      "overflow": "hidden",
      "paddingHorizontal": 16,
    }
  }
>
  <RNSVGSvgView
    align="xMidYMid"
    bbHeight={20}
    bbWidth={20}
    height={20}
    marginRight={8}
    meetOrSlice={0}
    minX={0}
    minY={0}
    style={
      Array [
        Object {
          "backgroundColor": "transparent",
          "borderWidth": 0,
        },
        undefined,
        null,
        Object {
          "flex": 0,
          "height": 20,
          "width": 20,
        },
      ]
    }
    vbHeight={24}
    vbWidth={24}
    width={20}
  >
    <RNSVGGroup
      fill={
        Array [
          0,
          4278190080,
        ]
      }
      fillOpacity={1}
      fillRule={1}
      font={Object {}}
      matrix={
        Array [
          1,
          0,
          0,
          1,
          0,
          0,
        ]
      }
      opacity={1}
      originX={0}
      originY={0}
      propList={Array []}
      rotation={0}
      scaleX={1}
      scaleY={1}
      skewX={0}
      skewY={0}
      stroke={null}
      strokeDasharray={null}
      strokeDashoffset={null}
      strokeLinecap={0}
      strokeLinejoin={0}
      strokeMiterlimit={4}
      strokeOpacity={1}
      strokeWidth={1}
      vectorEffect={0}
      x={0}
      y={0}
    >
      <RNSVGPath
        d="M19.18 6.32l-9.9 9.65-4.46-4.3c-.22-.23-.48-.33-.76-.33-.3 0-.54.1-.76.32-.2.2-.3.43-.3.7 0 .3.1.54.3.73l5.25 5.03c.2.22.44.32.74.32s.53-.1.72-.32l.14-.13L20.7 7.77c.2-.2.3-.43.3-.72 0-.3-.1-.53-.3-.72-.22-.2-.47-.32-.76-.32-.28 0-.54.1-.76.33z"
        fill={
          Array [
            0,
            4294967295,
          ]
        }
        fillOpacity={1}
        fillRule={1}
        matrix={
          Array [
            1,
            0,
            0,
            1,
            0,
            0,
          ]
        }
        opacity={1}
        originX={0}
        originY={0}
        propList={
          Array [
            "fill",
          ]
        }
        rotation={0}
        scaleX={1}
        scaleY={1}
        skewX={0}
        skewY={0}
        stroke={null}
        strokeDasharray={null}
        strokeDashoffset={null}
        strokeLinecap={0}
        strokeLinejoin={0}
        strokeMiterlimit={4}
        strokeOpacity={1}
        strokeWidth={1}
        vectorEffect={0}
        x={0}
        y={0}
      />
    </RNSVGGroup>
  </RNSVGSvgView>
  <Text
    style={
      Object {
        "color": "#FFFFFF",
        "fontFamily": "InterUI-Bold",
        "fontSize": 16,
        "lineHeight": 24,
      }
    }
  >
    You're all caught up!
  </Text>
</View>
`;

exports[`the UpNextButtonConnected renders a loading state state without a contentId 1`] = `
<View
  bordered={false}
  disabled={false}
  pill={true}
  style={
    Object {
      "alignItems": "center",
      "backgroundColor": "#00676D",
      "borderColor": "#00676D",
      "borderRadius": 48,
      "borderWidth": 2,
      "elevation": 2,
      "flexDirection": "row",
      "height": 48,
      "justifyContent": "center",
      "marginHorizontal": 16,
      "opacity": 1,
      "overflow": "hidden",
      "paddingHorizontal": 16,
    }
  }
>
  <ActivityIndicator
    animating={true}
    color="#FFFFFF"
    hidesWhenStopped={true}
    size="small"
  />
</View>
`;

exports[`the UpNextButtonConnected renders a loading state when loading 1`] = `
<View
  bordered={false}
  disabled={true}
  pill={true}
  style={
    Object {
      "alignItems": "center",
      "backgroundColor": "#00676D",
      "borderColor": "#00676D",
      "borderRadius": 48,
      "borderWidth": 2,
      "elevation": 2,
      "flexDirection": "row",
      "height": 48,
      "justifyContent": "center",
      "marginHorizontal": 16,
      "opacity": 0.5,
      "overflow": "hidden",
      "paddingHorizontal": 16,
    }
  }
>
  <ActivityIndicator
    animating={true}
    color="#FFFFFF"
    hidesWhenStopped={true}
    size="small"
  />
</View>
`;

exports[`the UpNextButtonConnected renders nothing when on an empty series 1`] = `null`;
