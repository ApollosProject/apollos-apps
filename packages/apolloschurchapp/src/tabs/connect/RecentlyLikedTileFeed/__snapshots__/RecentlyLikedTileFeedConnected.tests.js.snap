// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`RecentlyLikedTileFeedConnected renders a RecentlyLikedTileFeedConnected 1`] = `
<RCTSafeAreaView
  onLayout={[Function]}
  style={
    Object {
      "bottom": 0,
      "left": 0,
      "position": "absolute",
      "right": 0,
      "top": 0,
    }
  }
>
  <View
    onLayout={[Function]}
    style={
      Object {
        "flex": 1,
      }
    }
  />
  <View
    style={
      Object {
        "bottom": 0,
        "left": 0,
        "position": "absolute",
        "right": 0,
        "top": 0,
      }
    }
  >
    <View
      horizontal={false}
      style={
        Object {
          "paddingHorizontal": 0,
          "paddingVertical": 16,
        }
      }
    >
      <View
        style={
          Object {
            "alignItems": "center",
            "flexDirection": "row",
            "justifyContent": "space-between",
            "paddingHorizontal": 16,
            "paddingVertical": 0,
          }
        }
      >
        <View
          style={
            Object {
              "flexGrow": 1,
            }
          }
        >
          <Text
            style={
              Object {
                "color": "#303030",
                "fontFamily": "InterUI-Bold",
                "fontSize": 16,
                "lineHeight": 23.04,
              }
            }
          >
            Recently Liked
          </Text>
        </View>
        <View
          style={
            Object {
              "flexDirection": "row-reverse",
            }
          }
        >
          <Text
            style={
              Object {
                "color": "#303030",
                "fontFamily": "System",
                "fontSize": 14,
                "fontStyle": null,
                "fontWeight": null,
                "lineHeight": 20.16,
              }
            }
          >
            <Text
              onPress={[Function]}
              style={
                Object {
                  "color": "#17B582",
                }
              }
            >
              View All
            </Text>
          </Text>
        </View>
      </View>
      <RCTScrollView
        contentContainerStyle={
          Object {
            "padding": 8,
            "paddingBottom": 0,
          }
        }
        data={
          Array [
            Object {
              "__typename": "UniversalContentItem",
              "coverImage": Object {
                "sources": Array [
                  Object {
                    "uri": "https://apollosrock.newspring.cc/GetImage.ashx?guid=58c037fa-cc7f-4d72-9571-a0cc0558e346",
                  },
                ],
              },
              "id": "UniversalContentItem:296373ecb53580855cadffa0375ebe18",
              "title": "Guys Night!",
            },
            Object {
              "__typename": "UniversalContentItem",
              "coverImage": Object {
                "sources": Array [
                  Object {
                    "uri": "https://apollosrock.newspring.cc/GetImage.ashx?guid=f54b0db0-95f5-44ad-b8f2-8bcd1b23cfdb",
                  },
                ],
              },
              "id": "UniversalContentItem:39193b5ad28717ebfeab4d226664d8e7",
              "title": "This August at NewSpring",
            },
            Object {
              "__typename": "UniversalContentItem",
              "coverImage": Object {
                "sources": Array [
                  Object {
                    "uri": "https://apollosrock.newspring.cc/GetImage.ashx?guid=a65bc45d-f961-4b7e-a899-63eb1f9b8da9",
                  },
                ],
              },
              "id": "UniversalContentItem:ae8ec75906ba7437c49ad2534b5024db",
              "title": "A Place to Worship Free of Fear",
            },
          ]
        }
        decelerationRate="fast"
        disableVirtualization={false}
        getItem={[Function]}
        getItemCount={[Function]}
        horizontal={true}
        initialNumToRender={5}
        initialScrollIndex={0}
        keyExtractor={[Function]}
        loadingStateObject={
          Object {
            "coverImage": Array [],
            "id": "fake_id",
            "title": "",
          }
        }
        maxToRenderPerBatch={10}
        numColumns={1}
        onContentSizeChange={[Function]}
        onEndReachedThreshold={2}
        onLayout={[Function]}
        onMomentumScrollEnd={[Function]}
        onScroll={[Function]}
        onScrollBeginDrag={[Function]}
        onScrollEndDrag={[Function]}
        refreshing={false}
        renderItem={[Function]}
        scrollEventThrottle={50}
        showsHorizontalScrollIndicator={false}
        snapToAlignment="start"
        snapToInterval={512}
        stickyHeaderIndices={Array []}
        updateCellsBatchingPeriod={50}
        viewabilityConfigCallbackPairs={Array []}
        windowSize={21}
      >
        <View>
          <View
            onLayout={[Function]}
            style={
              Array [
                Object {
                  "flexDirection": "row",
                },
                null,
              ]
            }
          >
            <View
              accessible={true}
              onResponderGrant={[Function]}
              onResponderMove={[Function]}
              onResponderRelease={[Function]}
              onResponderTerminate={[Function]}
              onResponderTerminationRequest={[Function]}
              onStartShouldSetResponder={[Function]}
              style={
                Object {
                  "transform": Array [
                    Object {
                      "scale": 1,
                    },
                  ],
                }
              }
            >
              <View
                style={
                  Object {
                    "backgroundColor": "#FFFFFF",
                    "borderRadius": 16,
                    "marginHorizontal": 16,
                    "marginVertical": 12,
                    "shadowColor": "rgba(165, 165, 165, 0.30000000000000004)",
                    "shadowOffset": Object {
                      "height": 1,
                      "width": 0,
                    },
                    "shadowOpacity": 1,
                    "shadowRadius": 6,
                  }
                }
              >
                <View
                  style={
                    Object {
                      "aspectRatio": undefined,
                      "borderRadius": 16,
                      "overflow": "hidden",
                    }
                  }
                >
                  <View
                    style={
                      Object {
                        "paddingHorizontal": 16,
                        "paddingVertical": 16,
                      }
                    }
                  >
                    <Text
                      style={
                        Object {
                          "color": "#303030",
                          "fontFamily": "InterUI-Bold",
                          "fontSize": 16,
                          "lineHeight": 23.04,
                          "textAlign": "center",
                        }
                      }
                    >
                      Uh oh!
                    </Text>
                    <Text
                      style={
                        Object {
                          "color": "#505050",
                          "fontFamily": "InterUI-Bold",
                          "fontSize": 12,
                          "lineHeight": 17.28,
                          "textAlign": "center",
                        }
                      }
                    >
                      Network error: No more mocked responses for the query: query getContentCard($contentId: ID!, $tile: Boolean!) {
  node(id: $contentId) {
    id
    __typename
    ...tileCardFragment @include(if: $tile)
    ...largeCardFragment @skip(if: $tile)
  }
}

fragment tileCardFragment on ContentItem {
  ... on ContentSeriesContentItem {
    id
    ...themeFragment
    ...coverImageFragment
    ...contentCardMetricsFragment
    __typename
  }
  ... on UniversalContentItem {
    ...baseCardFragment
    __typename
  }
  ... on DevotionalContentItem {
    ...baseCardFragment
    __typename
  }
  ... on MediaContentItem {
    ...baseCardFragment
    __typename
  }
  __typename
}

fragment baseCardFragment on ContentItem {
  id
  __typename
  ...contentCardMetricsFragment
  ...coverImageFragment
  ...themeFragment
  title
  summary
}

fragment contentCardMetricsFragment on ContentItem {
  isLiked
  likedCount
  __typename
}

fragment coverImageFragment on ContentItem {
  coverImage {
    sources {
      uri
      __typename
    }
    __typename
  }
  __typename
}

fragment themeFragment on ContentItem {
  theme {
    type
    colors {
      primary
      secondary
      screen
      paper
      __typename
    }
    __typename
  }
  __typename
}

fragment largeCardFragment on ContentItem {
  ...baseCardFragment
  __typename
}
, variables: {"contentId":"UniversalContentItem:296373ecb53580855cadffa0375ebe18","tile":true}
                    </Text>
                  </View>
                </View>
              </View>
            </View>
          </View>
          <View
            onLayout={[Function]}
            style={
              Array [
                Object {
                  "flexDirection": "row",
                },
                null,
              ]
            }
          >
            <View
              accessible={true}
              onResponderGrant={[Function]}
              onResponderMove={[Function]}
              onResponderRelease={[Function]}
              onResponderTerminate={[Function]}
              onResponderTerminationRequest={[Function]}
              onStartShouldSetResponder={[Function]}
              style={
                Object {
                  "transform": Array [
                    Object {
                      "scale": 1,
                    },
                  ],
                }
              }
            >
              <View
                style={
                  Object {
                    "backgroundColor": "#FFFFFF",
                    "borderRadius": 16,
                    "marginHorizontal": 16,
                    "marginVertical": 12,
                    "shadowColor": "rgba(165, 165, 165, 0.30000000000000004)",
                    "shadowOffset": Object {
                      "height": 1,
                      "width": 0,
                    },
                    "shadowOpacity": 1,
                    "shadowRadius": 6,
                  }
                }
              >
                <View
                  style={
                    Object {
                      "aspectRatio": undefined,
                      "borderRadius": 16,
                      "overflow": "hidden",
                    }
                  }
                >
                  <View
                    style={
                      Object {
                        "paddingHorizontal": 16,
                        "paddingVertical": 16,
                      }
                    }
                  >
                    <Text
                      style={
                        Object {
                          "color": "#303030",
                          "fontFamily": "InterUI-Bold",
                          "fontSize": 16,
                          "lineHeight": 23.04,
                          "textAlign": "center",
                        }
                      }
                    >
                      Uh oh!
                    </Text>
                    <Text
                      style={
                        Object {
                          "color": "#505050",
                          "fontFamily": "InterUI-Bold",
                          "fontSize": 12,
                          "lineHeight": 17.28,
                          "textAlign": "center",
                        }
                      }
                    >
                      Network error: No more mocked responses for the query: query getContentCard($contentId: ID!, $tile: Boolean!) {
  node(id: $contentId) {
    id
    __typename
    ...tileCardFragment @include(if: $tile)
    ...largeCardFragment @skip(if: $tile)
  }
}

fragment tileCardFragment on ContentItem {
  ... on ContentSeriesContentItem {
    id
    ...themeFragment
    ...coverImageFragment
    ...contentCardMetricsFragment
    __typename
  }
  ... on UniversalContentItem {
    ...baseCardFragment
    __typename
  }
  ... on DevotionalContentItem {
    ...baseCardFragment
    __typename
  }
  ... on MediaContentItem {
    ...baseCardFragment
    __typename
  }
  __typename
}

fragment baseCardFragment on ContentItem {
  id
  __typename
  ...contentCardMetricsFragment
  ...coverImageFragment
  ...themeFragment
  title
  summary
}

fragment contentCardMetricsFragment on ContentItem {
  isLiked
  likedCount
  __typename
}

fragment coverImageFragment on ContentItem {
  coverImage {
    sources {
      uri
      __typename
    }
    __typename
  }
  __typename
}

fragment themeFragment on ContentItem {
  theme {
    type
    colors {
      primary
      secondary
      screen
      paper
      __typename
    }
    __typename
  }
  __typename
}

fragment largeCardFragment on ContentItem {
  ...baseCardFragment
  __typename
}
, variables: {"contentId":"UniversalContentItem:39193b5ad28717ebfeab4d226664d8e7","tile":true}
                    </Text>
                  </View>
                </View>
              </View>
            </View>
          </View>
          <View
            onLayout={[Function]}
            style={
              Array [
                Object {
                  "flexDirection": "row",
                },
                null,
              ]
            }
          >
            <View
              accessible={true}
              onResponderGrant={[Function]}
              onResponderMove={[Function]}
              onResponderRelease={[Function]}
              onResponderTerminate={[Function]}
              onResponderTerminationRequest={[Function]}
              onStartShouldSetResponder={[Function]}
              style={
                Object {
                  "transform": Array [
                    Object {
                      "scale": 1,
                    },
                  ],
                }
              }
            >
              <View
                style={
                  Object {
                    "backgroundColor": "#FFFFFF",
                    "borderRadius": 16,
                    "marginHorizontal": 16,
                    "marginVertical": 12,
                    "shadowColor": "rgba(165, 165, 165, 0.30000000000000004)",
                    "shadowOffset": Object {
                      "height": 1,
                      "width": 0,
                    },
                    "shadowOpacity": 1,
                    "shadowRadius": 6,
                  }
                }
              >
                <View
                  style={
                    Object {
                      "aspectRatio": undefined,
                      "borderRadius": 16,
                      "overflow": "hidden",
                    }
                  }
                >
                  <View
                    style={
                      Object {
                        "paddingHorizontal": 16,
                        "paddingVertical": 16,
                      }
                    }
                  >
                    <Text
                      style={
                        Object {
                          "color": "#303030",
                          "fontFamily": "InterUI-Bold",
                          "fontSize": 16,
                          "lineHeight": 23.04,
                          "textAlign": "center",
                        }
                      }
                    >
                      Uh oh!
                    </Text>
                    <Text
                      style={
                        Object {
                          "color": "#505050",
                          "fontFamily": "InterUI-Bold",
                          "fontSize": 12,
                          "lineHeight": 17.28,
                          "textAlign": "center",
                        }
                      }
                    >
                      Network error: No more mocked responses for the query: query getContentCard($contentId: ID!, $tile: Boolean!) {
  node(id: $contentId) {
    id
    __typename
    ...tileCardFragment @include(if: $tile)
    ...largeCardFragment @skip(if: $tile)
  }
}

fragment tileCardFragment on ContentItem {
  ... on ContentSeriesContentItem {
    id
    ...themeFragment
    ...coverImageFragment
    ...contentCardMetricsFragment
    __typename
  }
  ... on UniversalContentItem {
    ...baseCardFragment
    __typename
  }
  ... on DevotionalContentItem {
    ...baseCardFragment
    __typename
  }
  ... on MediaContentItem {
    ...baseCardFragment
    __typename
  }
  __typename
}

fragment baseCardFragment on ContentItem {
  id
  __typename
  ...contentCardMetricsFragment
  ...coverImageFragment
  ...themeFragment
  title
  summary
}

fragment contentCardMetricsFragment on ContentItem {
  isLiked
  likedCount
  __typename
}

fragment coverImageFragment on ContentItem {
  coverImage {
    sources {
      uri
      __typename
    }
    __typename
  }
  __typename
}

fragment themeFragment on ContentItem {
  theme {
    type
    colors {
      primary
      secondary
      screen
      paper
      __typename
    }
    __typename
  }
  __typename
}

fragment largeCardFragment on ContentItem {
  ...baseCardFragment
  __typename
}
, variables: {"contentId":"UniversalContentItem:ae8ec75906ba7437c49ad2534b5024db","tile":true}
                    </Text>
                  </View>
                </View>
              </View>
            </View>
          </View>
        </View>
      </RCTScrollView>
    </View>
  </View>
</RCTSafeAreaView>
`;

exports[`RecentlyLikedTileFeedConnected renders nothing if no liked content 1`] = `
<RCTSafeAreaView
  onLayout={[Function]}
  style={
    Object {
      "bottom": 0,
      "left": 0,
      "position": "absolute",
      "right": 0,
      "top": 0,
    }
  }
>
  <View
    onLayout={[Function]}
    style={
      Object {
        "flex": 1,
      }
    }
  />
  <View
    style={
      Object {
        "bottom": 0,
        "left": 0,
        "position": "absolute",
        "right": 0,
        "top": 0,
      }
    }
  />
</RCTSafeAreaView>
`;
